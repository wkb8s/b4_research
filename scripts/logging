#!/bin/bash

if [[ $# -lt 10 ]]; then
  echo "usage: ./scripts/logging NCPU NPROC POLICY LOG_SIZE WORKLOAD FORK_NUM CALC_NUM REPEAT_INDEX WORKLOAD_INDEX IS_DEBUG"
  exit 1
fi

NCPU=$1
NPROC=$2
POLICY=$3
LOG_SIZE=$4
WORKLOAD=$5
FORK_NUM=$6
CALC_NUM=$7
REPEAT_INDEX=$8
WORKLOAD_INDEX=$9
IS_DEBUG=${10}

LOG_PATH=log/tmp.log
MAKEFILE_PATH=src/Makefile

XV6_BOOT_TIME=2
VCPU_PINNING_TIME=1
TIMEOUT_SECONDS=$((XV6_BOOT_TIME + VCPU_PINNING_TIME))

# optimize timeout seconds
if [ $POLICY == "default" ]; then
  TIMEOUT_SECONDS=$((TIMEOUT_SECONDS + 3))
fi

# caluculation
if [ $WORKLOAD_INDEX == 0 ]; then
  TIMEOUT_SECONDS=$((TIMEOUT_SECONDS + 6))
# largewrite
elif [ $WORKLOAD_INDEX == 1 ]; then
	TIMEOUT_SECONDS=$((TIMEOUT_SECONDS + 8))
# yieldrepeat
elif [ $WORKLOAD_INDEX == 2 ]; then
	TIMEOUT_SECONDS=$((TIMEOUT_SECONDS + 30)) #2
fi

# edit Makefile
sed -i "s/CPUS\ :=\ [0-9]*/CPUS\ :=\ $NCPU/" $MAKEFILE_PATH

# generate header files
./scripts/generate_header $POLICY $WORKLOAD $FORK_NUM $CALC_NUM $NPROC $NCPU $LOG_SIZE $IS_DEBUG

# run xv6
sh -c "sleep $XV6_BOOT_TIME && scripts/vcpupin $NCPU > /dev/null && sleep $VCPU_PINNING_TIME && cat scripts/input" | \
sh -c "cd src && timeout $TIMEOUT_SECONDS make --silent qemu-nox | tee ../$LOG_PATH"

# delete unnecessary information
found=false
while IFS= read -r line; do
  sed -i '1d' "$LOG_PATH"
  if [[ $line == *"start printing"* ]]; then
    found=true
    break
  fi
done < "$LOG_PATH"

# save logs
python3 scripts/evaluate.py $NCPU $NPROC $POLICY $LOG_SIZE $WORKLOAD $FORK_NUM $CALC_NUM $REPEAT_INDEX $WORKLOAD_INDEX
